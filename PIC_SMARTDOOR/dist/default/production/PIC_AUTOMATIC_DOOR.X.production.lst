

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Mar 25 13:48:08 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0007                     PORTC           equ	7	;# 
    66     0008                     PORTD           equ	8	;# 
    67     0009                     PORTE           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000D                     PIR2            equ	13	;# 
    72     000E                     TMR1            equ	14	;# 
    73     000E                     TMR1L           equ	14	;# 
    74     000F                     TMR1H           equ	15	;# 
    75     0010                     T1CON           equ	16	;# 
    76     0011                     TMR2            equ	17	;# 
    77     0012                     T2CON           equ	18	;# 
    78     0013                     SSPBUF          equ	19	;# 
    79     0014                     SSPCON          equ	20	;# 
    80     0015                     CCPR1           equ	21	;# 
    81     0015                     CCPR1L          equ	21	;# 
    82     0016                     CCPR1H          equ	22	;# 
    83     0017                     CCP1CON         equ	23	;# 
    84     0018                     RCSTA           equ	24	;# 
    85     0019                     TXREG           equ	25	;# 
    86     001A                     RCREG           equ	26	;# 
    87     001B                     CCPR2           equ	27	;# 
    88     001B                     CCPR2L          equ	27	;# 
    89     001C                     CCPR2H          equ	28	;# 
    90     001D                     CCP2CON         equ	29	;# 
    91     001E                     ADRESH          equ	30	;# 
    92     001F                     ADCON0          equ	31	;# 
    93     0081                     OPTION_REG      equ	129	;# 
    94     0085                     TRISA           equ	133	;# 
    95     0086                     TRISB           equ	134	;# 
    96     0087                     TRISC           equ	135	;# 
    97     0088                     TRISD           equ	136	;# 
    98     0089                     TRISE           equ	137	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009C                     CMCON           equ	156	;# 
   109     009D                     CVRCON          equ	157	;# 
   110     009E                     ADRESL          equ	158	;# 
   111     009F                     ADCON1          equ	159	;# 
   112     010C                     EEDATA          equ	268	;# 
   113     010D                     EEADR           equ	269	;# 
   114     010E                     EEDATH          equ	270	;# 
   115     010F                     EEADRH          equ	271	;# 
   116     018C                     EECON1          equ	396	;# 
   117     018D                     EECON2          equ	397	;# 
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178     0008                     _PORTDbits      set	8
   179     0006                     _PORTBbits      set	6
   180     0007                     _PORTC          set	7
   181     0088                     _TRISD          set	136
   182     0087                     _TRISC          set	135
   183     0086                     _TRISB          set	134
   184                           
   185                           	psect	strings
   186     0003                     __pstrings:
   187     0003                     stringtab:
   188     0003                     __stringtab:
   189     0003                     stringcode:	
   190                           ;	String table - string pointers are 1 byte each
   191                           
   192     0003                     stringdir:
   193     0003  3000               	movlw	high stringdir
   194     0004  008A               	movwf	10
   195     0005  0804               	movf	4,w
   196     0006  0A84               	incf	4,f
   197     0007  0782               	addwf	2,f
   198     0008                     __stringbase:
   199     0008  3400               	retlw	0
   200     0009                     __end_of__stringtab:
   201     0009                     STR_5:
   202     0009  3452               	retlw	82	;'R'
   203     000A  3445               	retlw	69	;'E'
   204     000B  3441               	retlw	65	;'A'
   205     000C  3452               	retlw	82	;'R'
   206     000D  3420               	retlw	32	;' '
   207     000E  344C               	retlw	76	;'L'
   208     000F  3445               	retlw	69	;'E'
   209     0010  3446               	retlw	70	;'F'
   210     0011  3454               	retlw	84	;'T'
   211     0012  3420               	retlw	32	;' '
   212     0013  3444               	retlw	68	;'D'
   213     0014  344F               	retlw	79	;'O'
   214     0015  344F               	retlw	79	;'O'
   215     0016  3452               	retlw	82	;'R'
   216     0017  3420               	retlw	32	;' '
   217     0018  3420               	retlw	32	;' '
   218     0019  3400               	retlw	0
   219     001A                     STR_1:
   220     001A  3446               	retlw	70	;'F'
   221     001B  3452               	retlw	82	;'R'
   222     001C  344F               	retlw	79	;'O'
   223     001D  344E               	retlw	78	;'N'
   224     001E  3454               	retlw	84	;'T'
   225     001F  3420               	retlw	32	;' '
   226     0020  344C               	retlw	76	;'L'
   227     0021  3445               	retlw	69	;'E'
   228     0022  3446               	retlw	70	;'F'
   229     0023  3454               	retlw	84	;'T'
   230     0024  3420               	retlw	32	;' '
   231     0025  3444               	retlw	68	;'D'
   232     0026  344F               	retlw	79	;'O'
   233     0027  344F               	retlw	79	;'O'
   234     0028  3452               	retlw	82	;'R'
   235     0029  3420               	retlw	32	;' '
   236     002A  3400               	retlw	0
   237     002B                     STR_7:
   238     002B  3452               	retlw	82	;'R'
   239     002C  3445               	retlw	69	;'E'
   240     002D  3441               	retlw	65	;'A'
   241     002E  3452               	retlw	82	;'R'
   242     002F  3420               	retlw	32	;' '
   243     0030  3452               	retlw	82	;'R'
   244     0031  3449               	retlw	73	;'I'
   245     0032  3447               	retlw	71	;'G'
   246     0033  3448               	retlw	72	;'H'
   247     0034  3454               	retlw	84	;'T'
   248     0035  3420               	retlw	32	;' '
   249     0036  3444               	retlw	68	;'D'
   250     0037  344F               	retlw	79	;'O'
   251     0038  344F               	retlw	79	;'O'
   252     0039  3452               	retlw	82	;'R'
   253     003A  3420               	retlw	32	;' '
   254     003B  3400               	retlw	0
   255     003C                     STR_9:
   256     003C  3441               	retlw	65	;'A'
   257     003D  344C               	retlw	76	;'L'
   258     003E  344C               	retlw	76	;'L'
   259     003F  3420               	retlw	32	;' '
   260     0040  3444               	retlw	68	;'D'
   261     0041  344F               	retlw	79	;'O'
   262     0042  344F               	retlw	79	;'O'
   263     0043  3452               	retlw	82	;'R'
   264     0044  3453               	retlw	83	;'S'
   265     0045  3420               	retlw	32	;' '
   266     0046  3443               	retlw	67	;'C'
   267     0047  344C               	retlw	76	;'L'
   268     0048  344F               	retlw	79	;'O'
   269     0049  3453               	retlw	83	;'S'
   270     004A  3445               	retlw	69	;'E'
   271     004B  3444               	retlw	68	;'D'
   272     004C  3400               	retlw	0
   273     004D                     STR_3:
   274     004D  3446               	retlw	70	;'F'
   275     004E  3452               	retlw	82	;'R'
   276     004F  344F               	retlw	79	;'O'
   277     0050  344E               	retlw	78	;'N'
   278     0051  3454               	retlw	84	;'T'
   279     0052  3420               	retlw	32	;' '
   280     0053  3452               	retlw	82	;'R'
   281     0054  3449               	retlw	73	;'I'
   282     0055  3447               	retlw	71	;'G'
   283     0056  3448               	retlw	72	;'H'
   284     0057  3454               	retlw	84	;'T'
   285     0058  3420               	retlw	32	;' '
   286     0059  3444               	retlw	68	;'D'
   287     005A  344F               	retlw	79	;'O'
   288     005B  344F               	retlw	79	;'O'
   289     005C  3452               	retlw	82	;'R'
   290     005D  3400               	retlw	0
   291     005E                     STR_2:
   292     005E  3449               	retlw	73	;'I'
   293     005F  3453               	retlw	83	;'S'
   294     0060  3420               	retlw	32	;' '
   295     0061  344F               	retlw	79	;'O'
   296     0062  3450               	retlw	80	;'P'
   297     0063  3445               	retlw	69	;'E'
   298     0064  344E               	retlw	78	;'N'
   299     0065  3400               	retlw	0
   300     005E                     STR_4           equ	STR_2
   301     005E                     STR_6           equ	STR_2
   302     005E                     STR_8           equ	STR_2
   303                           
   304                           	psect	cinit
   305     07FC                     start_initialization:	
   306                           ; #config settings
   307                           
   308     07FC                     __initialization:
   309     07FC                     end_of_initialization:	
   310                           ;End of C runtime variable initialization code
   311                           
   312     07FC                     __end_of__initialization:
   313     07FC  0183               	clrf	3
   314     07FD  120A  118A  2EFB   	ljmp	_main	;jump to C main() function
   315                           
   316                           	psect	cstackCOMMON
   317     0070                     __pcstackCOMMON:
   318     0070                     ?_door_status:
   319     0070                     ?_lcd_data:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0070                     ?_lcd_cmd:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0070                     ?_lcd_init:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ?_main:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0070                     ??_lcd_data:	
   332                           ; 1 bytes @ 0x0
   333                           
   334     0070                     ??_lcd_cmd:	
   335                           ; 1 bytes @ 0x0
   336                           
   337                           
   338                           ; 1 bytes @ 0x0
   339     0070                     	ds	2
   340     0072                     lcd_data@data:
   341     0072                     lcd_cmd@cmd:	
   342                           ; 1 bytes @ 0x2
   343                           
   344                           
   345                           ; 1 bytes @ 0x2
   346     0072                     	ds	1
   347     0073                     ?_lcd_string:
   348     0073                     lcd_string@str:	
   349                           ; 1 bytes @ 0x3
   350                           
   351     0073                     ??_lcd_init:	
   352                           ; 1 bytes @ 0x3
   353                           
   354                           
   355                           ; 1 bytes @ 0x3
   356     0073                     	ds	1
   357     0074                     lcd_string@Num:
   358                           
   359                           ; 2 bytes @ 0x4
   360     0074                     	ds	2
   361     0076                     lcd_string@i:
   362     0076                     ??_lcd_string:	
   363                           ; 2 bytes @ 0x6
   364                           
   365                           
   366                           ; 1 bytes @ 0x6
   367     0076                     	ds	2
   368     0078                     door_status@door_open:
   369     0078                     ??_door_status:	
   370                           ; 1 bytes @ 0x8
   371                           
   372                           
   373                           ; 1 bytes @ 0x8
   374     0078                     	ds	1
   375     0079                     ??_main:
   376                           
   377                           	psect	maintext
   378     06FB                     __pmaintext:	
   379                           ; 1 bytes @ 0x9
   380 ;;
   381 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   382 ;;
   383 ;; *************** function _main *****************
   384 ;; Defined at:
   385 ;;		line 64 in file "main.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;		None
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   394 ;; Tracked objects:
   395 ;;		On entry : B00/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   399 ;;      Params:         0       0       0       0       0
   400 ;;      Locals:         0       0       0       0       0
   401 ;;      Temps:          0       0       0       0       0
   402 ;;      Totals:         0       0       0       0       0
   403 ;;Total ram usage:        0 bytes
   404 ;; Hardware stack levels required when called: 3
   405 ;; This function calls:
   406 ;;		_door_status
   407 ;;		_lcd_init
   408 ;; This function is called by:
   409 ;;		Startup code after reset
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413     06FB                     _main:	
   414                           ;psect for function _main
   415                           
   416     06FB                     l766:	
   417                           ;incstack = 0
   418                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   419                           
   420                           
   421                           ;main.c: 65:     TRISB = 0xF0;
   422     06FB  30F0               	movlw	240
   423     06FC  1683               	bsf	3,5	;RP0=1, select bank1
   424     06FD  1303               	bcf	3,6	;RP1=0, select bank1
   425     06FE  0086               	movwf	6	;volatile
   426     06FF                     l768:
   427                           
   428                           ;main.c: 66:     TRISC = 0x00;
   429     06FF  0187               	clrf	7	;volatile
   430     0700                     l770:
   431                           
   432                           ;main.c: 67:     TRISD = 0xFF;
   433     0700  30FF               	movlw	255
   434     0701  0088               	movwf	8	;volatile
   435     0702                     l772:
   436                           
   437                           ;main.c: 69:     lcd_init();
   438     0702  120A  118A  26D0  120A  118A  	fcall	_lcd_init
   439     0707                     l774:
   440                           
   441                           ;main.c: 72:         door_status();
   442     0707  120A  118A  2736  120A  118A  	fcall	_door_status
   443     070C                     l776:
   444                           
   445                           ;main.c: 75:         if (PORTBbits.RB4 == 1) {
   446     070C  1283               	bcf	3,5	;RP0=0, select bank0
   447     070D  1303               	bcf	3,6	;RP1=0, select bank0
   448     070E  1E06               	btfss	6,4	;volatile
   449     070F  2F11               	goto	u201
   450     0710  2F12               	goto	u200
   451     0711                     u201:
   452     0711  2F14               	goto	l37
   453     0712                     u200:
   454     0712                     l778:
   455                           
   456                           ;main.c: 76:             PORTBbits.RB3 = 1;
   457     0712  1586               	bsf	6,3	;volatile
   458                           
   459                           ;main.c: 77:         } else if (PORTBbits.RB5 == 1) {
   460     0713  2F07               	goto	l774
   461     0714                     l37:
   462     0714  1E86               	btfss	6,5	;volatile
   463     0715  2F17               	goto	u211
   464     0716  2F18               	goto	u210
   465     0717                     u211:
   466     0717  2F2C               	goto	l39
   467     0718                     u210:
   468     0718                     l780:
   469                           
   470                           ;main.c: 78:             if (PORTDbits.RD0 || PORTDbits.RD1 || PORTDbits.RD2 || PORTDbit
      +                          s.RD3) {
   471     0718  1808               	btfsc	8,0	;volatile
   472     0719  2F1B               	goto	u221
   473     071A  2F1C               	goto	u220
   474     071B                     u221:
   475     071B  2F28               	goto	l42
   476     071C                     u220:
   477     071C                     l782:
   478     071C  1888               	btfsc	8,1	;volatile
   479     071D  2F1F               	goto	u231
   480     071E  2F20               	goto	u230
   481     071F                     u231:
   482     071F  2F28               	goto	l42
   483     0720                     u230:
   484     0720                     l784:
   485     0720  1908               	btfsc	8,2	;volatile
   486     0721  2F23               	goto	u241
   487     0722  2F24               	goto	u240
   488     0723                     u241:
   489     0723  2F28               	goto	l42
   490     0724                     u240:
   491     0724                     l786:
   492     0724  1D88               	btfss	8,3	;volatile
   493     0725  2F27               	goto	u251
   494     0726  2F28               	goto	u250
   495     0727                     u251:
   496     0727  2F2A               	goto	l40
   497     0728                     u250:
   498     0728                     l42:
   499                           
   500                           ;main.c: 79:                 PORTBbits.RB3 = 1;
   501     0728  1586               	bsf	6,3	;volatile
   502                           
   503                           ;main.c: 80:             } else {
   504     0729  2F07               	goto	l774
   505     072A                     l40:
   506                           
   507                           ;main.c: 81:                 PORTBbits.RB3 = 0;
   508     072A  1186               	bcf	6,3	;volatile
   509     072B  2F07               	goto	l774
   510     072C                     l39:
   511     072C  1F06               	btfss	6,6	;volatile
   512     072D  2F2F               	goto	u261
   513     072E  2F30               	goto	u260
   514     072F                     u261:
   515     072F  2F32               	goto	l38
   516     0730                     u260:
   517     0730                     l788:
   518                           
   519                           ;main.c: 84:             PORTBbits.RB3 = 0;
   520     0730  1186               	bcf	6,3	;volatile
   521     0731  2F07               	goto	l774
   522     0732                     l38:
   523     0732  2F07               	goto	l774
   524     0733  120A  118A  2800   	ljmp	start
   525     0736                     __end_of_main:
   526                           
   527                           	psect	text1
   528     06D0                     __ptext1:	
   529 ;; *************** function _lcd_init *****************
   530 ;; Defined at:
   531 ;;		line 55 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, status,2, status,0, pclath, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   545 ;;      Params:         0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0
   547 ;;      Temps:          2       0       0       0       0
   548 ;;      Totals:         2       0       0       0       0
   549 ;;Total ram usage:        2 bytes
   550 ;; Hardware stack levels used: 1
   551 ;; Hardware stack levels required when called: 1
   552 ;; This function calls:
   553 ;;		_lcd_cmd
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559     06D0                     _lcd_init:	
   560                           ;psect for function _lcd_init
   561                           
   562     06D0                     l628:	
   563                           ;incstack = 0
   564                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   565                           
   566                           
   567                           ;main.c: 56:     lcd_cmd(0x38);
   568     06D0  3038               	movlw	56
   569     06D1  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   570     06D6                     l630:
   571                           
   572                           ;main.c: 57:     _delay((unsigned long)((20)*(20000000/4000.0)));
   573     06D6  3082               	movlw	130
   574     06D7  00F4               	movwf	??_lcd_init+1
   575     06D8  30DD               	movlw	221
   576     06D9  00F3               	movwf	??_lcd_init
   577     06DA                     u277:
   578     06DA  0BF3               	decfsz	??_lcd_init,f
   579     06DB  2EDA               	goto	u277
   580     06DC  0BF4               	decfsz	??_lcd_init+1,f
   581     06DD  2EDA               	goto	u277
   582     06DE  2EDF               	nop2
   583     06DF                     l632:
   584                           
   585                           ;main.c: 58:     lcd_cmd(0x0C);
   586     06DF  300C               	movlw	12
   587     06E0  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   588     06E5                     l634:
   589                           
   590                           ;main.c: 59:     lcd_cmd(0x06);
   591     06E5  3006               	movlw	6
   592     06E6  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   593     06EB                     l636:
   594                           
   595                           ;main.c: 60:     lcd_cmd(0x01);
   596     06EB  3001               	movlw	1
   597     06EC  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   598                           
   599                           ;main.c: 61:     _delay((unsigned long)((20)*(20000000/4000.0)));
   600     06F1  3082               	movlw	130
   601     06F2  00F4               	movwf	??_lcd_init+1
   602     06F3  30DD               	movlw	221
   603     06F4  00F3               	movwf	??_lcd_init
   604     06F5                     u287:
   605     06F5  0BF3               	decfsz	??_lcd_init,f
   606     06F6  2EF5               	goto	u287
   607     06F7  0BF4               	decfsz	??_lcd_init+1,f
   608     06F8  2EF5               	goto	u287
   609     06F9  2EFA               	nop2
   610     06FA                     l31:
   611     06FA  0008               	return
   612     06FB                     __end_of_lcd_init:
   613                           
   614                           	psect	text2
   615     0736                     __ptext2:	
   616 ;; *************** function _door_status *****************
   617 ;; Defined at:
   618 ;;		line 89 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  door_open       1    8[COMMON] unsigned char 
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   632 ;;      Params:         0       0       0       0       0
   633 ;;      Locals:         1       0       0       0       0
   634 ;;      Temps:          0       0       0       0       0
   635 ;;      Totals:         1       0       0       0       0
   636 ;;Total ram usage:        1 bytes
   637 ;; Hardware stack levels used: 1
   638 ;; Hardware stack levels required when called: 2
   639 ;; This function calls:
   640 ;;		_lcd_cmd
   641 ;;		_lcd_string
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647     0736                     _door_status:	
   648                           ;psect for function _door_status
   649                           
   650     0736                     l718:	
   651                           ;incstack = 0
   652                           ; Regs used in _door_status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   653                           
   654                           
   655                           ;main.c: 90:     unsigned char door_open = 0;
   656     0736  01F8               	clrf	door_status@door_open
   657     0737                     l720:
   658                           
   659                           ;main.c: 92:     if (PORTDbits.RD0 == 1) {
   660     0737  1283               	bcf	3,5	;RP0=0, select bank0
   661     0738  1303               	bcf	3,6	;RP1=0, select bank0
   662     0739  1C08               	btfss	8,0	;volatile
   663     073A  2F3C               	goto	u151
   664     073B  2F3D               	goto	u150
   665     073C                     u151:
   666     073C  2F61               	goto	l730
   667     073D                     u150:
   668     073D                     l722:
   669                           
   670                           ;main.c: 93:         lcd_cmd(0x80);
   671     073D  3080               	movlw	128
   672     073E  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   673     0743                     l724:
   674                           
   675                           ;main.c: 94:         lcd_string("FRONT LEFT DOOR ", 16);
   676     0743  3012               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   677     0744  00F3               	movwf	lcd_string@str
   678     0745  3010               	movlw	16
   679     0746  00F4               	movwf	lcd_string@Num
   680     0747  3000               	movlw	0
   681     0748  00F5               	movwf	lcd_string@Num+1
   682     0749  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   683     074E                     l726:
   684                           
   685                           ;main.c: 95:         lcd_cmd(0xC5);
   686     074E  30C5               	movlw	197
   687     074F  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   688                           
   689                           ;main.c: 96:         lcd_string("IS OPEN", 7);
   690     0754  3056               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   691     0755  00F3               	movwf	lcd_string@str
   692     0756  3007               	movlw	7
   693     0757  00F4               	movwf	lcd_string@Num
   694     0758  3000               	movlw	0
   695     0759  00F5               	movwf	lcd_string@Num+1
   696     075A  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   697     075F                     l728:
   698                           
   699                           ;main.c: 97:         door_open = 1;
   700     075F  3001               	movlw	1
   701     0760  00F8               	movwf	door_status@door_open
   702     0761                     l730:
   703                           
   704                           ;main.c: 100:     if (PORTDbits.RD1 == 1) {
   705     0761  1283               	bcf	3,5	;RP0=0, select bank0
   706     0762  1303               	bcf	3,6	;RP1=0, select bank0
   707     0763  1C88               	btfss	8,1	;volatile
   708     0764  2F66               	goto	u161
   709     0765  2F67               	goto	u160
   710     0766                     u161:
   711     0766  2F8B               	goto	l740
   712     0767                     u160:
   713     0767                     l732:
   714                           
   715                           ;main.c: 101:         lcd_cmd(0x80);
   716     0767  3080               	movlw	128
   717     0768  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   718     076D                     l734:
   719                           
   720                           ;main.c: 102:         lcd_string("FRONT RIGHT DOOR", 16);
   721     076D  3045               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   722     076E  00F3               	movwf	lcd_string@str
   723     076F  3010               	movlw	16
   724     0770  00F4               	movwf	lcd_string@Num
   725     0771  3000               	movlw	0
   726     0772  00F5               	movwf	lcd_string@Num+1
   727     0773  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   728     0778                     l736:
   729                           
   730                           ;main.c: 103:         lcd_cmd(0xC5);
   731     0778  30C5               	movlw	197
   732     0779  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   733                           
   734                           ;main.c: 104:         lcd_string("IS OPEN", 7);
   735     077E  3056               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   736     077F  00F3               	movwf	lcd_string@str
   737     0780  3007               	movlw	7
   738     0781  00F4               	movwf	lcd_string@Num
   739     0782  3000               	movlw	0
   740     0783  00F5               	movwf	lcd_string@Num+1
   741     0784  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   742     0789                     l738:
   743                           
   744                           ;main.c: 105:         door_open = 1;
   745     0789  3001               	movlw	1
   746     078A  00F8               	movwf	door_status@door_open
   747     078B                     l740:
   748                           
   749                           ;main.c: 108:     if (PORTDbits.RD2 == 1) {
   750     078B  1283               	bcf	3,5	;RP0=0, select bank0
   751     078C  1303               	bcf	3,6	;RP1=0, select bank0
   752     078D  1D08               	btfss	8,2	;volatile
   753     078E  2F90               	goto	u171
   754     078F  2F91               	goto	u170
   755     0790                     u171:
   756     0790  2FB5               	goto	l750
   757     0791                     u170:
   758     0791                     l742:
   759                           
   760                           ;main.c: 109:         lcd_cmd(0x80);
   761     0791  3080               	movlw	128
   762     0792  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   763     0797                     l744:
   764                           
   765                           ;main.c: 110:         lcd_string("REAR LEFT DOOR  ", 16);
   766     0797  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   767     0798  00F3               	movwf	lcd_string@str
   768     0799  3010               	movlw	16
   769     079A  00F4               	movwf	lcd_string@Num
   770     079B  3000               	movlw	0
   771     079C  00F5               	movwf	lcd_string@Num+1
   772     079D  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   773     07A2                     l746:
   774                           
   775                           ;main.c: 111:         lcd_cmd(0xC5);
   776     07A2  30C5               	movlw	197
   777     07A3  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   778                           
   779                           ;main.c: 112:         lcd_string("IS OPEN", 7);
   780     07A8  3056               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   781     07A9  00F3               	movwf	lcd_string@str
   782     07AA  3007               	movlw	7
   783     07AB  00F4               	movwf	lcd_string@Num
   784     07AC  3000               	movlw	0
   785     07AD  00F5               	movwf	lcd_string@Num+1
   786     07AE  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   787     07B3                     l748:
   788                           
   789                           ;main.c: 113:         door_open = 1;
   790     07B3  3001               	movlw	1
   791     07B4  00F8               	movwf	door_status@door_open
   792     07B5                     l750:
   793                           
   794                           ;main.c: 116:     if (PORTDbits.RD3 == 1) {
   795     07B5  1283               	bcf	3,5	;RP0=0, select bank0
   796     07B6  1303               	bcf	3,6	;RP1=0, select bank0
   797     07B7  1D88               	btfss	8,3	;volatile
   798     07B8  2FBA               	goto	u181
   799     07B9  2FBB               	goto	u180
   800     07BA                     u181:
   801     07BA  2FDF               	goto	l760
   802     07BB                     u180:
   803     07BB                     l752:
   804                           
   805                           ;main.c: 117:         lcd_cmd(0x80);
   806     07BB  3080               	movlw	128
   807     07BC  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   808     07C1                     l754:
   809                           
   810                           ;main.c: 118:         lcd_string("REAR RIGHT DOOR ", 16);
   811     07C1  3023               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   812     07C2  00F3               	movwf	lcd_string@str
   813     07C3  3010               	movlw	16
   814     07C4  00F4               	movwf	lcd_string@Num
   815     07C5  3000               	movlw	0
   816     07C6  00F5               	movwf	lcd_string@Num+1
   817     07C7  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   818     07CC                     l756:
   819                           
   820                           ;main.c: 119:         lcd_cmd(0xC5);
   821     07CC  30C5               	movlw	197
   822     07CD  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   823                           
   824                           ;main.c: 120:         lcd_string("IS OPEN", 7);
   825     07D2  3056               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   826     07D3  00F3               	movwf	lcd_string@str
   827     07D4  3007               	movlw	7
   828     07D5  00F4               	movwf	lcd_string@Num
   829     07D6  3000               	movlw	0
   830     07D7  00F5               	movwf	lcd_string@Num+1
   831     07D8  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   832     07DD                     l758:
   833                           
   834                           ;main.c: 121:         door_open = 1;
   835     07DD  3001               	movlw	1
   836     07DE  00F8               	movwf	door_status@door_open
   837     07DF                     l760:
   838                           
   839                           ;main.c: 124:     if (!door_open) {
   840     07DF  0878               	movf	door_status@door_open,w
   841     07E0  1D03               	btfss	3,2
   842     07E1  2FE3               	goto	u191
   843     07E2  2FE4               	goto	u190
   844     07E3                     u191:
   845     07E3  2FFB               	goto	l56
   846     07E4                     u190:
   847     07E4                     l762:
   848                           
   849                           ;main.c: 125:         lcd_cmd(0x01);
   850     07E4  3001               	movlw	1
   851     07E5  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   852                           
   853                           ;main.c: 126:         lcd_cmd(0x80);
   854     07EA  3080               	movlw	128
   855     07EB  120A  118A  2685  120A  118A  	fcall	_lcd_cmd
   856     07F0                     l764:
   857                           
   858                           ;main.c: 127:         lcd_string("ALL DOORS CLOSED", 16);
   859     07F0  3034               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   860     07F1  00F3               	movwf	lcd_string@str
   861     07F2  3010               	movlw	16
   862     07F3  00F4               	movwf	lcd_string@Num
   863     07F4  3000               	movlw	0
   864     07F5  00F5               	movwf	lcd_string@Num+1
   865     07F6  120A  118A  26AF  120A  118A  	fcall	_lcd_string
   866     07FB                     l56:
   867     07FB  0008               	return
   868     07FC                     __end_of_door_status:
   869                           
   870                           	psect	text3
   871     06AF                     __ptext3:	
   872 ;; *************** function _lcd_string *****************
   873 ;; Defined at:
   874 ;;		line 49 in file "main.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  str             1    3[COMMON] PTR unsigned char 
   877 ;;		 -> STR_9(17), STR_8(8), STR_7(17), STR_6(8), 
   878 ;;		 -> STR_5(17), STR_4(8), STR_3(17), STR_2(8), 
   879 ;;		 -> STR_1(17), 
   880 ;;  Num             2    4[COMMON] unsigned int 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  i               2    6[COMMON] unsigned int 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  1    wreg      void 
   885 ;; Registers used:
   886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   892 ;;      Params:         3       0       0       0       0
   893 ;;      Locals:         2       0       0       0       0
   894 ;;      Temps:          0       0       0       0       0
   895 ;;      Totals:         5       0       0       0       0
   896 ;;Total ram usage:        5 bytes
   897 ;; Hardware stack levels used: 1
   898 ;; Hardware stack levels required when called: 1
   899 ;; This function calls:
   900 ;;		_lcd_data
   901 ;; This function is called by:
   902 ;;		_door_status
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906     06AF                     _lcd_string:	
   907                           ;psect for function _lcd_string
   908                           
   909     06AF                     l710:	
   910                           ;incstack = 0
   911                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   912                           
   913                           
   914                           ;main.c: 50:     for (unsigned int i = 0; i < Num; i++) {
   915     06AF  01F6               	clrf	lcd_string@i
   916     06B0  01F7               	clrf	lcd_string@i+1
   917     06B1  2EC5               	goto	l716
   918     06B2                     l712:
   919                           
   920                           ;main.c: 51:         lcd_data(str[i]);
   921     06B2  0876               	movf	lcd_string@i,w
   922     06B3  0773               	addwf	lcd_string@str,w
   923     06B4  0084               	movwf	4
   924     06B5  120A  118A  2003  120A  118A  	fcall	stringdir
   925     06BA  120A  118A  269A  120A  118A  	fcall	_lcd_data
   926     06BF                     l714:
   927                           
   928                           ;main.c: 52:     }
   929     06BF  3001               	movlw	1
   930     06C0  07F6               	addwf	lcd_string@i,f
   931     06C1  1803               	skipnc
   932     06C2  0AF7               	incf	lcd_string@i+1,f
   933     06C3  3000               	movlw	0
   934     06C4  07F7               	addwf	lcd_string@i+1,f
   935     06C5                     l716:
   936     06C5  0875               	movf	lcd_string@Num+1,w
   937     06C6  0277               	subwf	lcd_string@i+1,w
   938     06C7  1D03               	skipz
   939     06C8  2ECB               	goto	u145
   940     06C9  0874               	movf	lcd_string@Num,w
   941     06CA  0276               	subwf	lcd_string@i,w
   942     06CB                     u145:
   943     06CB  1C03               	skipc
   944     06CC  2ECE               	goto	u141
   945     06CD  2ECF               	goto	u140
   946     06CE                     u141:
   947     06CE  2EB2               	goto	l712
   948     06CF                     u140:
   949     06CF                     l28:
   950     06CF  0008               	return
   951     06D0                     __end_of_lcd_string:
   952                           
   953                           	psect	text4
   954     069A                     __ptext4:	
   955 ;; *************** function _lcd_data *****************
   956 ;; Defined at:
   957 ;;		line 31 in file "main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  data            1    wreg     unsigned char 
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  data            1    2[COMMON] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   971 ;;      Params:         0       0       0       0       0
   972 ;;      Locals:         1       0       0       0       0
   973 ;;      Temps:          2       0       0       0       0
   974 ;;      Totals:         3       0       0       0       0
   975 ;;Total ram usage:        3 bytes
   976 ;; Hardware stack levels used: 1
   977 ;; This function calls:
   978 ;;		Nothing
   979 ;; This function is called by:
   980 ;;		_lcd_string
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984     069A                     _lcd_data:	
   985                           ;psect for function _lcd_data
   986                           
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _lcd_data: [wreg]
   990                           ;lcd_data@data stored from wreg
   991     069A  00F2               	movwf	lcd_data@data
   992     069B                     l600:
   993                           
   994                           ;main.c: 32:     PORTC = data;
   995     069B  0872               	movf	lcd_data@data,w
   996     069C  1283               	bcf	3,5	;RP0=0, select bank0
   997     069D  1303               	bcf	3,6	;RP1=0, select bank0
   998     069E  0087               	movwf	7	;volatile
   999     069F                     l602:
  1000                           
  1001                           ;main.c: 33:     PORTBbits.RB0 = 1;
  1002     069F  1406               	bsf	6,0	;volatile
  1003     06A0                     l604:
  1004                           
  1005                           ;main.c: 34:     PORTBbits.RB1 = 0;
  1006     06A0  1086               	bcf	6,1	;volatile
  1007     06A1                     l606:
  1008                           
  1009                           ;main.c: 35:     PORTBbits.RB2 = 1;
  1010     06A1  1506               	bsf	6,2	;volatile
  1011                           
  1012                           ;main.c: 36:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1013     06A2  3021               	movlw	33
  1014     06A3  00F1               	movwf	??_lcd_data+1
  1015     06A4  3076               	movlw	118
  1016     06A5  00F0               	movwf	??_lcd_data
  1017     06A6                     u297:
  1018     06A6  0BF0               	decfsz	??_lcd_data,f
  1019     06A7  2EA6               	goto	u297
  1020     06A8  0BF1               	decfsz	??_lcd_data+1,f
  1021     06A9  2EA6               	goto	u297
  1022     06AA  0000               	nop
  1023     06AB                     l608:
  1024                           
  1025                           ;main.c: 37:     PORTBbits.RB2 = 0;
  1026     06AB  1283               	bcf	3,5	;RP0=0, select bank0
  1027     06AC  1303               	bcf	3,6	;RP1=0, select bank0
  1028     06AD  1106               	bcf	6,2	;volatile
  1029     06AE                     l19:
  1030     06AE  0008               	return
  1031     06AF                     __end_of_lcd_data:
  1032                           
  1033                           	psect	text5
  1034     0685                     __ptext5:	
  1035 ;; *************** function _lcd_cmd *****************
  1036 ;; Defined at:
  1037 ;;		line 40 in file "main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  cmd             1    wreg     unsigned char 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  cmd             1    2[COMMON] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1051 ;;      Params:         0       0       0       0       0
  1052 ;;      Locals:         1       0       0       0       0
  1053 ;;      Temps:          2       0       0       0       0
  1054 ;;      Totals:         3       0       0       0       0
  1055 ;;Total ram usage:        3 bytes
  1056 ;; Hardware stack levels used: 1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_lcd_init
  1061 ;;		_door_status
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065     0685                     _lcd_cmd:	
  1066                           ;psect for function _lcd_cmd
  1067                           
  1068                           
  1069                           ;incstack = 0
  1070                           ; Regs used in _lcd_cmd: [wreg]
  1071                           ;lcd_cmd@cmd stored from wreg
  1072     0685  00F2               	movwf	lcd_cmd@cmd
  1073     0686                     l610:
  1074                           
  1075                           ;main.c: 41:     PORTC = cmd;
  1076     0686  0872               	movf	lcd_cmd@cmd,w
  1077     0687  1283               	bcf	3,5	;RP0=0, select bank0
  1078     0688  1303               	bcf	3,6	;RP1=0, select bank0
  1079     0689  0087               	movwf	7	;volatile
  1080     068A                     l612:
  1081                           
  1082                           ;main.c: 42:     PORTBbits.RB0 = 0;
  1083     068A  1006               	bcf	6,0	;volatile
  1084     068B                     l614:
  1085                           
  1086                           ;main.c: 43:     PORTBbits.RB1 = 0;
  1087     068B  1086               	bcf	6,1	;volatile
  1088     068C                     l616:
  1089                           
  1090                           ;main.c: 44:     PORTBbits.RB2 = 1;
  1091     068C  1506               	bsf	6,2	;volatile
  1092                           
  1093                           ;main.c: 45:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1094     068D  3021               	movlw	33
  1095     068E  00F1               	movwf	??_lcd_cmd+1
  1096     068F  3076               	movlw	118
  1097     0690  00F0               	movwf	??_lcd_cmd
  1098     0691                     u307:
  1099     0691  0BF0               	decfsz	??_lcd_cmd,f
  1100     0692  2E91               	goto	u307
  1101     0693  0BF1               	decfsz	??_lcd_cmd+1,f
  1102     0694  2E91               	goto	u307
  1103     0695  0000               	nop
  1104     0696                     l618:
  1105                           
  1106                           ;main.c: 46:     PORTBbits.RB2 = 0;
  1107     0696  1283               	bcf	3,5	;RP0=0, select bank0
  1108     0697  1303               	bcf	3,6	;RP1=0, select bank0
  1109     0698  1106               	bcf	6,2	;volatile
  1110     0699                     l22:
  1111     0699  0008               	return
  1112     069A                     __end_of_lcd_cmd:
  1113     0002                     ___latbits      equ	2
  1114     007E                     btemp           set	126	;btemp
  1115     007E                     wtemp0          set	126
  1116                           
  1117                           	psect	config
  1118                           
  1119                           ;Config register CONFIG @ 0x2007
  1120                           ;	Oscillator Selection bits
  1121                           ;	FOSC = HS, HS oscillator
  1122                           ;	Watchdog Timer Enable bit
  1123                           ;	WDTE = OFF, WDT disabled
  1124                           ;	Power-up Timer Enable bit
  1125                           ;	PWRTE = OFF, PWRT disabled
  1126                           ;	Brown-out Reset Enable bit
  1127                           ;	BOREN = ON, BOR enabled
  1128                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1129                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1130                           ;	Data EEPROM Memory Code Protection bit
  1131                           ;	CPD = OFF, Data EEPROM code protection off
  1132                           ;	Flash Program Memory Write Enable bits
  1133                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1134                           ;	In-Circuit Debugger Mode bit
  1135                           ;	DEBUG = 0x1, unprogrammed default
  1136                           ;	Flash Program Memory Code Protection bit
  1137                           ;	CP = ON, All program memory code-protected
  1138     2007                     	org	8199
  1139     2007  1FFA               	dw	8186

Data Sizes:
    Strings     93
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@str	PTR unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[8]), STR_3(CODE[17]), STR_4(CODE[8]), 
		 -> STR_5(CODE[17]), STR_6(CODE[8]), STR_7(CODE[17]), STR_8(CODE[8]), 
		 -> STR_9(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_door_status
    _lcd_init->_lcd_cmd
    _door_status->_lcd_string
    _lcd_string->_lcd_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     180
                        _door_status
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _door_status                                          1     1      0     165
                                              8 COMMON     1     1      0
                            _lcd_cmd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           5     2      3     123
                                              3 COMMON     5     2      3
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _door_status
     _lcd_cmd
     _lcd_string
       _lcd_data
   _lcd_init
     _lcd_cmd

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      9       9     64.3%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       9      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Mar 25 13:48:08 2025

                      pc 0002             lcd_data@data 0072                       l22 0699  
                     l31 06FA                       l40 072A                       l42 0728  
                     l19 06AE                       l28 06CF                       l37 0714  
                     l38 0732                       l39 072C                       l56 07FB  
                     fsr 0004                      l600 069B                      l610 0686  
                    l602 069F                      l612 068A                      l604 06A0  
                    l614 068B                      l606 06A1                      l710 06AF  
                    l630 06D6                      l616 068C                      l608 06AB  
                    l712 06B2                      l720 0737                      l632 06DF  
                    l618 0696                      l714 06BF                      l722 073D  
                    l730 0761                      l634 06E5                      l716 06C5  
                    l732 0767                      l740 078B                      l724 0743  
                    l636 06EB                      l628 06D0                      l742 0791  
                    l750 07B5                      l734 076D                      l726 074E  
                    l718 0736                      l752 07BB                      l760 07DF  
                    l744 0797                      l736 0778                      l728 075F  
                    l762 07E4                      l754 07C1                      l746 07A2  
                    l738 0789                      l770 0700                      l764 07F0  
                    l756 07CC                      l748 07B3                      l780 0718  
                    l772 0702                      l758 07DD                      l782 071C  
                    l774 0707                      l766 06FB                      l784 0720  
                    l776 070C                      l768 06FF                      l786 0724  
                    l778 0712                      l788 0730                      u200 0712  
                    u201 0711                      u210 0718                      u211 0717  
                    u140 06CF                      u220 071C                      u141 06CE  
                    u221 071B                      u150 073D                      u230 0720  
                    u151 073C                      u231 071F                      u160 0767  
                    u240 0724                      u145 06CB                      u161 0766  
                    u241 0723                      u170 0791                      u250 0728  
                    u307 0691                      u171 0790                      u251 0727  
                    u180 07BB                      u260 0730                      u181 07BA  
                    u261 072F                      u190 07E4                      u191 07E3  
                    u277 06DA                      u287 06F5                      u297 06A6  
                    fsr0 0004                     STR_1 001A                     STR_2 005E  
                   STR_3 004D                     STR_4 005E                     STR_5 0009  
                   STR_6 005E                     STR_7 002B                     STR_8 005E  
                   STR_9 003C             ?_door_status 0070                     _main 06FB  
                   btemp 007E                     start 0000              lcd_string@i 0076  
                  ?_main 0070                    _PORTC 0007                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088          __end_of_lcd_cmd 069A  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 0736                   ??_main 0079  
       __end_of_lcd_data 06AF         __end_of_lcd_init 06FB                ??_lcd_cmd 0070  
          lcd_string@Num 0074            lcd_string@str 0073  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 06FB                ?_lcd_data 0070  
             _lcd_string 06AF                ?_lcd_init 0070               __stringtab 0003  
   door_status@door_open 0078                  __ptext1 06D0                  __ptext2 0736  
                __ptext3 06AF                  __ptext4 069A                  __ptext5 0685  
                _lcd_cmd 0685               ??_lcd_data 0070               ??_lcd_init 0073  
   end_of_initialization 07FC                _PORTBbits 0006                _PORTDbits 0008  
             lcd_cmd@cmd 0072              ?_lcd_string 0073      start_initialization 07FC  
          ??_door_status 0078                ___latbits 0002      __end_of_door_status 07FC  
              __pstrings 0003                 ?_lcd_cmd 0070              __stringbase 0008  
           ??_lcd_string 0076              _door_status 0736       __end_of_lcd_string 06D0  
     __end_of__stringtab 0009                 _lcd_data 069A                 _lcd_init 06D0  
              stringcode 0003                 stringdir 0003                 stringtab 0003  
